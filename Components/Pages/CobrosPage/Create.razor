@page "/Cobros/Create"
@rendermode InteractiveServer
@inject DeudorService deudorService
@inject PrestamoService prestamoService
@inject CobroService cobroService
@inject NavigationManager navigation

<PageTitle> Crear cobros</PageTitle>
<EditForm Model="Cobro" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center">
				<h5 class="card-title">Crear cobro</h5>
			</div>
			<div class="card-body">

				@* CobroId *@
				<div class="col-7">
					<label class="form-label"><strong>CobroId</strong></label>
					<InputNumber class="form-control" @bind-Value="Cobro.CobroId" readonly></InputNumber>
				</div>

				@*Fecha*@
				<div class="mb-3">
					<label for="fecha" class="form-label"><strong>Fecha</strong></label>
					<InputDate id="fecha" class="form-control" @bind-Value="Cobro.Fecha"></InputDate>
				</div>

				@*Deudor*@
				<div class="mb-3">
					<label for="deudor" class="form-label"><strong>Deudor</strong> </label>
					<div class="input-group">
						<InputSelect id="deudor" class="form-control form-select " @bind-Value="Cobro.DeudorId" @onfocus="LimpiarMensaje">
							<option value="0" selected disabled>Seleccione un deudor</option>
							@foreach (var deudor in ListDeudores)
							{
								<option value="@deudor.DeudorId">@deudor.Nombres</option>
							}
						</InputSelect>
						<button type="button" @onclick="Buscar" class="btn btn-outline-primary bi bi-arrow-clockwise"> Buscar</button>
					</div>
					<ValidationMessage For="@(() => Cobro.DeudorId)" />
				</div>

				@*DetallesCobro*@
				<div class="border border-success p-3 mt-3">
					<h5> Detalles del cobro</h5>
					<div class="row">
						@*Prestamo*@
						<div class="col-md-6">
							<label for="prestamo" class="form-label">Prestamos</label>
							<div class="input-group">
								<InputSelect id="prestamo" class="form-select " @bind-Value="NuevoDetalle.PrestamoId" @onfocus="LimpiarMensaje">
									<option value="0" selected disabled>-- Seleccione un pr&eacute;stamo --</option>
									@foreach (var prestamo in ListPrestamos)
									{
										<option value="@prestamo.PrestamoId"> @prestamo.PrestamoId - @prestamo.Concepto (@prestamo.Balance)</option>
									}
								</InputSelect>
								<ValidationMessage For="@(() => NuevoDetalle.PrestamoId)" />
								<button type="button" @onclick=" ()=> BuscarMontoPrestamo(NuevoDetalle.PrestamoId)" class="btn btn-outline-primary bi bi-search"> </button>
							</div>

						</div>

						@*ValorCobrado*@
						<div class="col-md-3">
							<label for="valorCobrado" class="form-label">Valor Cobrado</label>
							<InputNumber id="valorCobrado" class="form-control" @bind-Value="NuevoDetalle.ValorCobrado" placeholder="$0.00" @onfocus="LimpiarMensaje"></InputNumber>
							<ValidationMessage For="@(() => NuevoDetalle.ValorCobrado)" />
						</div>
						<div class="col-md-3 mt-3">
							<button type="button" class="btn btn-outline-success bi bi-plus-square mt-3" @onclick="AgregarDetalle"> Agregar Detalle</button>

						</div>
					</div>
					<table class="table table-light">
						<thead class="table table-striped">
							<tr class="Text-center">
								<th>Pr&eacute;stamo</th>
								<th>Valor cobrado</th>
								<th>Remover</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in ListDetalles)
							{
								<tr>
									<th>@detalle.PrestamoId</th>
									<th>@detalle.ValorCobrado</th>
									<th>
										<button type="button" @onclick=" ()=> Eliminar(detalle)" class="btn btn-outline-danger bi bi-trash"> </button>
									</th>
								</tr>
							}
						</tbody>
					</table>
					@*Monto*@
					<div class="col-md-4 offset-8">
						<label class="form-label"><strong>Monto</strong></label>
						<InputNumber class="form-control text-end" @bind-Value="Cobro.Monto" placeholder="$0.00"> @Cobro.Monto</InputNumber>
						<ValidationMessage For="(() => Cobro.Monto)" />
					</div>
				</div>
			</div>
		</div>
		<div class="card-footer">
			@if (!string.IsNullOrEmpty(ErrorMessage))
			{
				<div class="alert alert-danger bi-exclamation-triangle-fill ">@ErrorMessage</div>
			}

			@if (!string.IsNullOrEmpty(CheckMessage))
			{
				<div class="alert alert-success bi bi-check2-circle"> @CheckMessage</div>
			}

			<a href="/Cobros/Index" class="btn btn-outline-secondary bi bi-arrow-left mt-2">Volver</a>
			<button type="submit" class="btn btn-outline-success bi bi-floppy mt-2"> Guardar</button>
		</div>
	</div>

</EditForm>


@code {
	public Cobros? Cobro { get; set; } = new Cobros();
	public Prestamos? Prestamo { get; set; } = new Prestamos();
	public List<Deudores> ListDeudores { get; set; } = new List<Deudores>();
	public List<CobrosDetalle> ListDetalles { get; set; } = new List<CobrosDetalle>();
	public List<Prestamos> ListPrestamos { get; set; } = new List<Prestamos>();
	public CobrosDetalle NuevoDetalle { get; set; } = new CobrosDetalle();
	public string? Nombre { get; set; }
	public string ErrorMessage { get; set; }
	public string CheckMessage { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ListDeudores = await deudorService.Listar(d => true);
	}

	public async Task AgregarDetalle()
	{
		if (Cobro.DeudorId == 0)
		{
			ErrorMessage = "Debe seleccionar un deudor";
		}
		else if (NuevoDetalle.ValorCobrado <= 0)
		{
			ErrorMessage = "El valor cobrado debe ser mayor que 0.";
			return;
		}
		else if (NuevoDetalle.ValorCobrado == null)
		{
			ErrorMessage = "Por favor ingrese el valor cobrado";
			return;
		}
		else if (NuevoDetalle.PrestamoId == 0)
		{
			ErrorMessage = "Debe seleccionar un prestamo";
			return;
		}
		var prestamoSeleccionado = ListPrestamos.FirstOrDefault(p => p.PrestamoId == NuevoDetalle.PrestamoId);
		if (NuevoDetalle.ValorCobrado > prestamoSeleccionado.Balance)
		{
			ErrorMessage = $"El valor cobrado no puede ser mayor que el balance del préstamo ({prestamoSeleccionado.Balance:C}).";
			return;
		}
		else
		{
			NuevoDetalle.CobroId = Cobro.CobroId;
			ListDetalles.Add(NuevoDetalle);
			Cobro.Monto = ListDetalles.Sum(d => d.ValorCobrado);
			NuevoDetalle = new CobrosDetalle();
			CheckMessage = "El detalle se ha agregado correctamente";
		}
	}

	public async Task BuscarMontoPrestamo(int id)
	{
		var prestamoMonto = await prestamoService.Buscar(id);
		if (prestamoMonto != null)
		{
			Cobro.Monto = prestamoMonto.Monto;
		}

		else
		{
			ErrorMessage = "Debe seleccionar un deudor";
		}

	}

	public async Task Buscar()
	{
		Prestamo = await prestamoService.BuscarDeudor(Cobro.DeudorId);
		if (Cobro.DeudorId == 0)
		{
			ErrorMessage = "Debe seleccionar un deudor";
		}
		else
		{
			if (Prestamo?.Deudor.Nombres == null)
			{
				ErrorMessage = "El deudor seleccionado no tiene ningun cobro pendiente";
			}
			else
			{
				ListPrestamos = await prestamoService.Listar(p => p.DeudorId == Cobro.DeudorId);
				Cobro.Monto = Prestamo.Balance;
			}
		}
	}

	public async Task Eliminar(CobrosDetalle detalle)
	{
		ListDetalles.Remove(detalle);
		NuevoDetalle.ValorCobrado = detalle.ValorCobrado;
		NuevoDetalle.PrestamoId = detalle.PrestamoId;
	}


	public async Task Guardar()
	{
		if (ListDetalles == null || !ListDetalles.Any())
		{
			ErrorMessage = "Debe agregar al menos un detalle de cobro antes de guardar.";
			return;
		}

		foreach (var detalle in ListDetalles)
		{
			Cobro.CobrosDetalle.Add(detalle);
		}
		await cobroService.Guardar(Cobro);
		navigation.NavigateTo("/Cobros/Index");
	}

	public void LimpiarMensaje()
	{
		ErrorMessage = string.Empty;
		CheckMessage = string.Empty;
	}
} 